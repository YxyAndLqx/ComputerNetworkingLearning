2020年2月19日：
	学习《计算机网络自顶向下方法》第三章
	运输层位于应用层和网络层之间，是分层的网络体系结构的重要部分
	3.1 概述和运输层服务
		1.运输层协议为运行在不同主机上的应用进程之间提供了逻辑通信功能
		2.运输层只在端系统中实现
		3.运输层分组被称为运输层报文段
		4.重要事实：网络路由器仅作用于该数据报的网络层字段；即它们不检查封装在该数据报的运输层报文段的字段
		5.运输层协议不仅有TCP和UDP
	3.1.1 运输层和网络层的关系
		1.网络层提供主机之间的逻辑通信，而运输层为运行在不同主机上的进程之间提供逻辑通信
		2.计算机网络中可以安排多种运输层协议，每种协议为应用程序提供不同的服务模型。
		3.运输层协议能够提供的服务常常受制于底层网络层协议的服务模型
		4.运输层协议也能为应用程序提供可靠的数据传输服务
	3.1.2 因特网运输层概述
		1.UDP（用户数据报协议），提供不可靠无连接服务；TCP（传输控制协议），提供可靠的、面向连接的服务
		2.有时也将TCP的运输层分组称为报文段，而常将UDP的分组称为数据报
		3.IP为主机之间提供逻辑通信。IP的的服务模型是“尽力而为的交付服务”所以被称为不可靠服务
		4.将主机间交付扩展到进程间交付被称为运输层的多路复用与多路分解
		5.UDP是一种不可靠服务
		6.TCP提供可靠数据传输，提供拥塞控制
		7.TCP通过流量速率调节使每个进程能平的地共享网络带宽资源，UDO的流量不可调节（用户可调节），使用UDP传输的应用程序可以根据其需要以其愿意的任何速率发送数据（很好的抢带宽特性）
	3.2 多路复用与多路分解
		1.将运输层报文段中的数据交付到正确套接字的工作称为多路分解
		2.在源主机从不同套接字中收集数据块，并为每个数据块封装部首信息从而生产报文段，然后将报文段传递到网络层，这些所有工作称为多路复用
		3.端口号是一个16比特的数，其大小在0~65535之间。0~1023为周知端口号
		4.一个UDP套接字由一个目的IP地址和一个目的端口号标识，两个有不同源端口号，源IP地址，相同目的端口号，目的IP地址的UDP报文将通过相同的目的套接字被定向到相同的目的进程。 
		5.TCP通过4元组（源端口号，源IP地址，目的端口号，目的IP地址）唯一标识一个套接字，与UDP不同的是，两个具有不同源IP地址或源端口号的到达TCP报文段将被定向到两个不同的套接字。
2020-2-20：
	3.3无连接的传输：UDP
		1.UDP只是做了运输协议能够做的最少工作，除了复用/分解功能及少量的差错检测外，它几乎没有对IP增加别的东西
		2.使用UDP时，发送报文之前，发送方和接收方的运输层实体之间没有握手，所以UDP称为无连接的
		3.DNS是一个通常使用UDP的例子。
		4.TCP并不总是首选，UDP可以由应用层更精确地控制何时发送何种数据，UDP无需建立连接，没有连接时延。UDP无连接状态可以支持更多的活跃客户，UDP分组首部开销小
		5.TCP的拥塞控制会导致如因特网电话、视频会议之类的实时应用性能变得很差，所以多媒体应用通常使用UDP
		6.当分组丢包率低时，并且为了安全起见，某些机构阻塞UDP流量。
		7.UDP缺乏拥塞控制能够导致UDP发送方和接收方之间的高丢包率，并挤垮TCP会话，这是一个潜在的严重问题
		8.使用UDP的应用是可以实现可靠数据传输的。将可靠性直接构建于应用程序中可以使其“左右逢源”也就是说应用进程可以进行可靠通信，而无需受制于由TCP拥塞控制机制导致的传输速率限制。
	3.3.1 UDP报文结构
		+--------------------+--------------------+
		|      源端口号      |    目的端口号      |
		+--------------------+--------------------+
		|        长度        |     校验和         |
		+--------------------+--------------------+
		|                应用数据                 |
		|                （报文）                 |
		+-----------------------------------------+
		|_________________________________________|
						  32比特
		UDP首部只有4个字段：长度字段指首部加数据的长度，校验和用于接收方检查是否出现差错
	3.3.2 UDP校验和
	    1.对报文段中的所有16比特字的和进行反码运算，求和时遇到的任何溢出都回卷
		2.端到端原则：因为某种功能必须基于端到端实现：与在较高界别提供这些功能的代价相比，在较低级别上设置的功能可能是冗余或几乎没有价值的。
	3.4 可靠数据传输原理
		1.TCP提供传输数据比特不会受到损害或丢失，而且所有数据都是按照其发送顺序进行交付的服务模型
		2.实现这种服务抽象是可靠数据传输协议的责任
	3.4.1 构造可靠数据传输协议
		1.有限状态机（FSM）
		2.ACK（肯定确认）
		3.NAK（否定确认）
		4.ACK和NAK控制报文是接收方可以让发送方知道哪些内容被正确接收，哪些内容接收有误需要重传。基于这种重传机制的可靠数据传输协议称为自动重传请求协议（ARQ）
		5.ARQ协议还需要差错检测，接收方反馈，重传
		6.发送一个报文等待回复再发送另一个报文的协议称为停等协议。
		7.报文中增加序号字段，接收方可以通过检查序号确定收到的分组是否是一次重传。
		8.确定丢包等待时间，发送方与接收方之间的往返时延，接受方处理一个分组的时间
		9.实践中，发送方等待一个时间，超时即重传，无论是否真的丢包
		10.分组的接受时间必定晚于发送时间
		11.因为分组序号在0和1之间交替，rdt3.0也被称为比特交替协议

	明天还需要仔细研究一下rdt3.0
2020-2-21：
	重看rdt3.0
	3.4.2 流水线可靠数据传输协议
		1.对于rdt3.0这样一个停等协议，在两个端系统之间传播时延RTT=30毫秒，通过一条发送速率R为1Gbps的信道传递分组，其信道利用率仅0.00027
		2.信道利用率：发送方实际忙于将发送比特送进信道的那部分时间与发送时间之比
		3.允许发送多个分组而无需等待确认的技术，称为流水线。
		4.需要为流水线技术增加序号范围
		5.协议的发送方和接收方两端也许必须缓存多个分组。发送方最低限度应当能缓存那些已经发送但是没有确认的分组
		6.所需序号范围和对缓冲的要求取决于数据传输协议如何处理丢失、损坏及延时过大的分组。
		7.解决流水线的差错恢复有两种基本方法，回退N步（GBN)和选择重传（SR）。
	3.4.3 回退N步
		1.回退N步协议，允许发送方发送多个分组而不需要等待确认，但它也受限于在流水线中未确认的分组数不能超过某个最大允许数N
		2.那些已被发送但还未被确认的分组的许可序号范围可以被看成是一个在序号范围内长度为N的窗口。随着协议的运行，该窗口可以在序号空间向前滑动，所以N常被称为窗口长度，GBN协议也常被称为滑动窗口协议。
		3.GBN发送方必须响应三种类型的事件：
			>上层的调用
			>收到一个ACK。对序号为n的分组确认采用累积确认的方式，表明接收方已正确接收到序号为n的以前且包含n在内的所有分组
			>超时事件，超时后协议重传所有发送未确认的分组，回退n步的由来。
		4.接收方丢弃所有失序分组.
		5.这种方法的优点是接收缓存简单，接收方不需要缓存任何失序分组。
		